{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a Python program that matches a string that has an 'a' followed by zero or more 'b''s."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['ab', 'a', 'a', 'abb', 'abbb']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "text = \"ab acb acc bc abbc abbbc\"\n",
    "matches = re.findall(\"ab*|a\", text)\n",
    "\n",
    "print(matches)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a Python program that matches a string that has an 'a' followed by two to three 'b'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['abb', 'abbb']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "text = \"ab acb acc bc abbc abbbc\"\n",
    "matches = re.findall(\"ab{2,3}\", text)\n",
    "\n",
    "print(matches)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a Python program to find sequences of lowercase letters joined with a underscore."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['d_e', 'h_j']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "text = \"AB_Cd_eF_gh_jK\"\n",
    "matches = re.findall(\"[a-z]_[a-z]\", text)\n",
    "\n",
    "print(matches)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a Python program to find the sequences of one upper case letter followed by lower case letters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Cd']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "text = \"AB_Cd_eF_gh_jK\"\n",
    "matches = re.findall(\"[A-Z][a-z]\", text)\n",
    "\n",
    "print(matches)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a Python program that matches a string that has an 'a' followed by anything, ending in 'b'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['a acb accb']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "text = \"a acb accb c ac ac\"\n",
    "matches = re.findall(\"a.*b\", text)\n",
    "\n",
    "print(matches)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a Python program to replace all occurrences of space, comma, or dot with a colon."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a:acb:accb:c:ac:ac\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "text = \"a acb.accb,c ac.ac\"\n",
    "matches = re.sub(\"[ ,.]\", \":\", text)\n",
    "\n",
    "print(matches)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a python program to convert snake case string to camel case string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hell0WorldAgain\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "snake_case = \"hell0_world_again\"\n",
    "words = re.split('_', snake_case)\n",
    "CamelCase = words[0] + ''.join(word.capitalize() for word in words[1:])\n",
    "print(CamelCase)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a Python program to split a string at uppercase letters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Hell0', 'World', 'Again']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "text = \"Hell0WorldAgain\"\n",
    "matches = re.findall(\"[A-Z][^A-Z]*\", text)\n",
    "print(matches)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a Python program to insert spaces between words starting with capital letters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hell0 World Again\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "text = \"Hell0WorldAgain\"\n",
    "matches = ' '.join(re.findall('[A-Z][^A-Z]*', text))\n",
    "print(matches)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a Python program to convert a given camel case string to snake case."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hell0_world_again\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "CamelCase = \"hell0WorldAgain\"\n",
    "snake_case = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', CamelCase).lower()\n",
    "print(snake_case)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}